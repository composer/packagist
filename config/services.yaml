# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    # default params which can be overriden by config/parameters.yaml
    force_ssl: false
    forced_ssl_hosts: []
    aws_metadata: []
    packagist_metadata_dir: '%kernel.cache_dir%/composer-packages-build'
    packagist_dumper_compress: 0
    trusted_ip_header: ''
    github.webhook_secret: '%env(APP_GITHUB_WEBHOOK_SECRET)%'
    fallback_gh_tokens: []

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            # services
            $redis: '@snc_redis.default'
            $redisCache: '@snc_redis.cache'
            $recaptchaVerifier: "@beelab_recaptcha2.verifier"
            'Monolog\Logger': '@logger'
            'Symfony\Contracts\EventDispatcher\EventDispatcherInterface $mainEventDispatcher': '@security.event_dispatcher.main'

            # params
            $dbUrl: '%env(DATABASE_URL)%'
            $awsMetadata: '%aws_metadata%'
            $cacheDir: '%kernel.cache_dir%'
            $webDir: '%kernel.project_dir%/web/'
            $metadataDir: '%packagist_metadata_dir%'
            $trustedIpHeader: '%trusted_ip_header%'
            $algoliaIndexName: '%env(ALGOLIA_INDEX_NAME)%'
            $githubWebhookSecret: '%env(APP_GITHUB_WEBHOOK_SECRET)%'
            $recaptchaEnabled: "%env(bool:APP_RECAPTCHA_ENABLED)%"
            $mailFromEmail: "%env(APP_MAILER_FROM_EMAIL)%"
            $mailFromName: "%env(APP_MAILER_FROM_NAME)%"
            $fallbackGhTokens: "%fallback_gh_tokens%"
            $configDir: '%kernel.project_dir%/config/'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\Entity\:
        resource: '../src/Entity/*Repository.php'

    Graze\DogStatsD\Client: ~

    App\EventListener\CacheListener:
        tags:
            - { name: kernel.event_listener, event: kernel.response, method: onResponse }

    App\EventListener\SecurityAdvisoryUpdateListener:
        tags:
            - { name: 'doctrine.orm.entity_listener', event: postUpdate, entity: App\Entity\SecurityAdvisory }
            - { name: 'doctrine.orm.entity_listener', event: postPersist, entity: App\Entity\SecurityAdvisory }

    App\ArgumentResolver\:
        resource: '../src/ArgumentResolver/*.php'
        tags:
            - { name: controller.argument_value_resolver, priority: 101 } # Put these above RequestAttributeValueResolver

    App\Package\SymlinkDumper:
        arguments:
            $webDir: '%kernel.project_dir%/web/'
            $targetDir: '%packagist_metadata_dir%'
            $compress: '%packagist_dumper_compress%'

    App\Package\V2Dumper:
        arguments:
            $webDir: '%kernel.project_dir%/web/'
            $targetDir: '%packagist_metadata_dir%'

    App\Security\Provider\UserProvider: ~

    App\Model\PackageManager:
        bind:
            $options: { from: '%env(APP_MAILER_FROM_EMAIL)%', fromName: '%env(APP_MAILER_FROM_NAME)%' }

    App\Menu\MenuBuilder:
        arguments: ['@knp_menu.factory', '@security.token_storage', '@translator']

    packagist.menu.user:
        class: Knp\Menu\MenuItem
        factory: ['@App\Menu\MenuBuilder', createUserMenu]
        tags:
            - { name: knp_menu.menu, alias: user_menu }

    packagist.menu.profile:
        class: Knp\Menu\MenuItem
        factory: ['@App\Menu\MenuBuilder', createProfileMenu]
        tags:
            - { name: knp_menu.menu, alias: profile_menu }

    Algolia\AlgoliaSearch\SearchClient:
        arguments: ['%env(ALGOLIA_APP_ID)%', '%env(ALGOLIA_ADMIN_KEY)%']
        factory: ['Algolia\AlgoliaSearch\SearchClient', create]

    App\Service\QueueWorker:
        arguments:
            - "@snc_redis.default"
            - "@doctrine"
            - "@logger"
            - 'package:updates': '@App\Service\UpdaterWorker'
              'githubuser:migrate': '@App\Service\GitHubUserMigrationWorker'
              'security:advisory': '@App\Service\SecurityAdvisoryWorker'

    App\Security\TwoFactorAuthManager:
        public: true
        class: App\Security\TwoFactorAuthManager
        arguments:
            $options: { from: '%env(APP_MAILER_FROM_EMAIL)%', fromName: '%env(APP_MAILER_FROM_NAME)%' }

    App\Service\SecurityAdvisoryWorker:
        bind:
            $sources:
                'FriendsOfPHP/security-advisories': '@App\SecurityAdvisory\FriendsOfPhpSecurityAdvisoriesSource'
                'GitHub': '@App\SecurityAdvisory\GitHubSecurityAdvisoriesSource'

    Symfony\Component\HttpFoundation\Session\Storage\Handler\RedisSessionHandler:
        arguments: ['@snc_redis.cache', {prefix: 'sess:', ttl: 3600}]

    Symfony\Component\HttpClient\NoPrivateNetworkHttpClient: ~
