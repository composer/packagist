# run with: bin/phpstan analyse

includes:
    - phpstan-baseline.neon
    - vendor/phpstan/phpstan-doctrine/extension.neon
    - vendor/phpstan/phpstan-doctrine/rules.neon
    - vendor/phpstan/phpstan-symfony/extension.neon
    - vendor/phpstan/phpstan-symfony/rules.neon
    - vendor/phpstan/phpstan-webmozart-assert/extension.neon
    - vendor/composer/pcre/extension.neon
    - vendor/staabm/phpstan-dba/config/dba.neon
    - vendor/staabm/phpstan-todo-by/extension.neon
    - vendor/phpstan/phpstan-deprecation-rules/rules.neon

parameters:
    level: 8
    checkExplicitMixedMissingReturn: true

    treatPhpDocTypesAsCertain: false
    reportUnmatchedIgnoredErrors: true

    paths:
        - src/

    symfony:
        containerXmlPath: var/cache/dev/App_KernelDevDebugContainer.xml
        consoleApplicationLoader: tests/console-application.php

    scanDirectories:
#        - var/cache/dev/Symfony/Config

    bootstrapFiles:
        - phpstan-bootstrap.php

    doctrine:
        objectManagerLoader: tests/object-manager.php

    ignoreErrors:
        # https://github.com/phpstan/phpstan-doctrine/issues/176
        - '~Property App\\Entity\\Dependent::\$type type mapping mismatch: database can contain int but property expects~'
        - '~Property App\\Entity\\PhpStat::\$type type mapping mismatch: database can contain int but property expects~'
        - '~Property App\\Entity\\PhpStat::\$depth type mapping mismatch: database can contain int but property expects~'
        - '~Property App\\Entity\\Job::\$status type mapping mismatch: database can contain string but property expects~'

    typeAliases:
        AwsMetadata: 'array{}|array{ec2_node: string, ip: string, region: string, primary: bool, has_instance_store: bool, is_worker: bool, is_web: bool}'

        VersionData: 'array<int, array{require: VersionDataLinks, devRequire: VersionDataLinks, suggest: VersionDataLinks, conflict: VersionDataLinks, provide: VersionDataLinks, replace: VersionDataLinks, tags: list<string>}>'
        VersionDataLinks: 'array<array{version_id: int, name: string, version: string}>'

        ExistingVersionsForUpdate: 'array<string, array{id: int, version: string, normalizedVersion: string, source: PackageSource, softDeletedAt: string|null, defaultBranch: int}>'

        PackageAutoloadRules: 'array{psr-0?: array<string, string|string[]>, psr-4?: array<string, string|string[]>, classmap?: list<string>, files?: list<string>, exclude-from-classmap?: list<string>}'
        PackageDist: 'array{url: string|null, type: string|null, reference: string|null, shasum: string|null}|null'
        PackageSource: 'array{url: string|null, type: string|null, reference: string|null}|null'

        AnyJob: 'array<string, bool|int|string>'
        PackageUpdateJob: 'array{id: int, update_equal_refs: bool, delete_before: bool, force_dump: bool, source: string}'
        GitHubUserMigrateJob: 'array{id: int, old_scope: string, new_scope: string}'
        SecurityAdvisoryJob: 'array{source: string}'

        JobResult: 'array{status: \App\Entity\Job::STATUS_*, message: string, vendor?: string, details?: string, exceptionMsg?: string, exceptionClass?: class-string<\Throwable>, results?: array{hooks_setup: int, hooks_failed: array<int, array{package: string, reason: mixed}>, hooks_ok_unchanged: int}}'
        ErroredResult: 'array{status: \App\Entity\Job::STATUS_ERRORED, message: string, exception: \Throwable}'
        GenericCompletedResult: 'array{status: \App\Entity\Job::STATUS_COMPLETED, message: string}'
        RescheduleResult: 'array{status: \App\Entity\Job::STATUS_RESCHEDULE, after: \DateTimeImmutable, message: string, vendor?: string}'
        PackageCompletedResult: 'array{status: \App\Entity\Job::STATUS_COMPLETED, message: string, details: string, vendor: string}'
        PackageFailedResult: 'array{status: \App\Entity\Job::STATUS_FAILED, message: string, vendor: string, exception: \Throwable, details?: string}'
        PackageGoneResult: 'array{status: \App\Entity\Job::STATUS_PACKAGE_GONE, message: string, vendor: string, exception: \Throwable, details?: string}'
        PackageDeletedResult: 'array{status: \App\Entity\Job::STATUS_PACKAGE_DELETED, message: string, vendor: string, exception: \Throwable, details: string}'
        AdvisoriesCompletedResult: 'array{status: \App\Entity\Job::STATUS_COMPLETED, message: string, details: string}'
        AdvisoriesErroredResult: 'array{status: \App\Entity\Job::STATUS_ERRORED, message: string}'
        GitHubMigrationResult: 'array{status: \App\Entity\Job::STATUS_COMPLETED, message: string, results: array{hooks_setup: int, hooks_failed: array<int, array{package: string, reason: mixed}>, hooks_ok_unchanged: int}}'
        GitHubMigrationFailedResult: 'array{status: \App\Entity\Job::STATUS_FAILED, message: string}'
